#!/usr/bin/env python3

import argparse
import csv
import datetime
import os
from typing import Any, Dict, List

# Example usage:
# quick copy this with the vim-motion: yi'  or yiq

# Markdown only shorthand
# copy_me = "~/dotfiles/nvim/.config/nvim/LuaSnip/markdown/generate_shorthand.py \
# ~/dotfiles/espanso/Library/Application\ Support/espanso/MyScripts/shorthand/shorthand_en.csv \
# -w 0 -p 60 --propagate-case -o ~/dotfiles/nvim/.config/nvim/LuaSnip/markdown/shorthand_en.lua"

# All files shorthand
copy_me = "~/dotfiles/nvim/.config/nvim/LuaSnip/markdown/generate_shorthand.py \
~/dotfiles/espanso/Library/Application\ Support/espanso/MyScripts/shorthand/shorthand_en.csv \
-w 0 -p 60 --propagate-case -o ~/dotfiles/nvim/.config/nvim/LuaSnip/all/shorthand_en.lua"


def list_of_dicts_to_luasnip(data: List[Dict[str, Any]]) -> str:
    """
    Converts a list of dictionaries to a luasnipet string

    Args:
        data (List[Dict[str, Any]]): List of dictionaries to be converted to YAML.

    Returns:
        str: The formatted string.
    """
    date = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    boilerplate = (
        lambda snippets: """-- Autogenerated shortand snippets generatde on """
        + date
        + """"
local ls = require 'luasnip'
local s = ls.snippet
local t = ls.text_node

return {
"""
        + snippets
        + "\n}"
    )

    snippets = []

    for item in data:

        # Normal snippet
        snip = (
            '\ns({trig="'
            + item["trigger"]
            + ' ", wordTrig=true, snippetType="autosnippet"}, {t("'
            + item["rhs"]
            + ' ")} )'
        )
        snippets.append(snip)

    snippets = ",".join(snippets)
    return boilerplate(snippets)


def csv_to_dict(
    csv_path: str, word_score: int, practice_score: int, propagate_case=False
):
    """Create python dict from csv file and filter out only the entries you want"""

    matches = []

    # Rank zero has a special meaning and means 'all words'
    if word_score == 0:
        word_score = 99999999
    if practice_score == 0:
        practice_score = 99999999

    with open(csv_path, "r", newline="", encoding="utf-8") as csv_file:
        reader = csv.reader(csv_file)

        for row in reader:
            # check row has at least 3 columns
            if len(row) < 3:
                print(f"Skipping {row} because it has less than 3 columns")
                continue
            trigger, rhs, rank, *other = row
            # by default, all parsed values from the csv are strings
            try:
                rank = int(rank)
            except ValueError:
                rank = None
            # print(f"trigger: {trigger}, rhs: {rhs}, rank: {rank}")

            if rank is None:
                print(f"Skipping {trigger} because it has no rank")
                continue

            # only include shorthands that are more or equally important than
            # the input score.
            if rank <= word_score:
                snippet_entry = {
                    "trigger": trigger,
                    "rhs": rhs,
                }
                matches.append(snippet_entry)

            if propagate_case:
                # Add the snippet in the opposite case
                snippet_entry = {
                    "trigger": trigger.capitalize(),
                    "rhs": rhs.capitalize(),
                }
                matches.append(snippet_entry)

            # Practice mode
            if rank <= practice_score:
                snippet_entry = {
                    "trigger": rhs,
                    "rhs": trigger,
                }
                matches.append(snippet_entry)

    return matches


def write_snippet_file_to_destination_dir(
    output_file_name: str, output_dir: str, content: str
) -> None:
    # Ensure the target directory exists
    os.makedirs(output_dir, exist_ok=True)

    # Define the full path to the new file
    file_path = os.path.join(output_dir, output_file_name)

    # Open the file in write mode and write the content
    with open(file_path, "w") as file:
        file.write(content)

    # print(f"File '{output_file_name}' created in '{output_dir}'.")


# The script should take as input the
def main():
    parser = argparse.ArgumentParser(
        description="Generate Luasnipet shorthand snippets from a CSV file"
    )
    parser.add_argument(
        "csv_path",
        type=str,
        help="Path to the input CSV file. E.g. `source/all_english_words.csv`",
    )
    # 'store_true' is used to store a boolean value. If the option is specified, the
    # value is True, otherwise it is False.
    parser.add_argument(
        "-w",
        "--word-score",
        type=int,
        default=0,
        help=""""Only include words whose frequency in the language is at least this high. 

E.g. -w=10 to only generate snippets for the top ten words. Defaults to 0, which means all words.""",
    )
    parser.add_argument(
        "-p",
        "--practice-score",
        type=int,
        default=0,
        # action="store_true",
        help=""""Only include words whose frequency in the language is at least
        this high.

E.g. -p=10 to only generate snippets for the top ten words. Defaults to 0, which
means all words.""",
    )
    parser.add_argument(
        "-o",
        "--output-path",
        type=str,
        default="./shorthand_en.lua",
        nargs="?",
        help='Name of the output YAML" file. Defaults to `shorthand.lua`. Defaults to the current directory.',
    )
    parser.add_argument(
        "-c",
        "--propagate-case",
        action="store_true",
        default=False,
        help="Generate snippets for both the literal snippet triggers defined in your CSV, as well as their capitalized versions. Defaults to False.",
    )

    args = parser.parse_args()

    # de-structure the arguments
    csv_path = args.csv_path
    propagate_case = args.propagate_case

    # deduce the output file name from the output path
    output_dir, output_file_name = os.path.split(args.output_path)

    print(f"\noutput_dir: {output_dir}, output_file_name: {output_file_name}")

    # Generate the YAML file from the CSV file
    print(
        f'csv_path: "{csv_path}" word_score: "{args.word_score}" practice_score: "{args.practice_score}"'
    )

    print("\nStarting the generation...")
    data = csv_to_dict(
        csv_path=csv_path,
        word_score=args.word_score,
        practice_score=args.practice_score,
        propagate_case=propagate_case,
    )
    luasnips = list_of_dicts_to_luasnip(data=data)

    # Move the YAML file to the destination directory
    write_snippet_file_to_destination_dir(
        output_file_name=output_file_name, output_dir=output_dir, content=luasnips
    )

    success_message = f"""
Successfully saved "{output_file_name}" in the directory "{output_dir}".

Snippets are based on the CSV file: "{csv_path}".
"""
    print(success_message)


if __name__ == "__main__":
    main()
